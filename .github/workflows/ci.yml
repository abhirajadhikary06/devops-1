# .github/workflows/ci.yml
name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # -------------------------------------------------
      # 1. Checkout code
      # -------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # -------------------------------------------------
      # 2. Set up Python
      # -------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # -------------------------------------------------
      # 3. Cache Playwright browsers (speed up future runs)
      # -------------------------------------------------
      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      # -------------------------------------------------
      # 4. Install Python dependencies
      # -------------------------------------------------
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # -------------------------------------------------
      # 5. Install Playwright browsers (only if cache miss)
      # -------------------------------------------------
      - name: Install Playwright browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: |
          playwright install --with-deps

      # -------------------------------------------------
      # 6. Run unit tests (pytest) â€“ no server needed
      # -------------------------------------------------
      - name: Run unit tests
        run: |
          pytest tests/ -vv

      # -------------------------------------------------
      # 7. Start Flask app in background
      # -------------------------------------------------
      - name: Start Flask application
        run: |
          nohup python app.py > app.log 2>&1 &
          echo "Flask app started (PID: $!)"

      # -------------------------------------------------
      # 8. Wait for Flask to be ready (health check)
      # -------------------------------------------------
      - name: Wait for Flask server
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 30
          max_attempts: 12
          retry_wait_seconds: 3
          command: |
            curl -f http://127.0.0.1:5000/ || exit 1

      # -------------------------------------------------
      # 9. Run Playwright E2E tests
      # -------------------------------------------------
      - name: Run Playwright E2E tests
        run: |
          pytest e2e/ -vv

      # -------------------------------------------------
      # 10. Build Docker image
      # -------------------------------------------------
      - name: Build Docker image
        run: |
          docker build -t myflaskapp .

      # -------------------------------------------------
      # 11. Upload Flask logs on failure (debugging)
      # -------------------------------------------------
      - name: Upload Flask logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: flask-app-logs
          path: app.log